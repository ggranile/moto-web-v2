---
import Layout from "@/layouts/Layout.astro";

import MotoBackground from "@/assets/moto-background.png";
import MotoEyes from "@/assets/moto-eyes.png";
import MotoWelcome from "@/assets/moto-welcome.png";
import Menu from "@/assets/menu.svg";
---

<Layout>
  <div class="scroll-container"></div>

<section id="content" class="fixed inset-0 bg-black text-neutral-100 z-10 min-h-screen">
  <canvas id="space" class="absolute inset-0 block w-full h-full"></canvas>

<div class="relative z-10 mx-auto max-w-6xl p-6 sm:p-8 w-full">
  <!-- Grid principal -->
  <div class="grid gap-6 lg:gap-8 lg:grid-cols-2">

    <section
      class="lg:col-span-2 rounded-3xl border-4 border-[#233055] bg-gradient-to-br from-[#0d1630] to-[#0b1226] p-6 sm:p-8 shadow-[0_12px_0_0_rgba(0,0,0,0.45)]">
      <div class="flex items-center gap-3 mb-6">
        <span class="inline-flex items-center gap-2 px-3 py-1 rounded-full border-4 border-[#233055] bg-[#0f1a37] shadow-[0_6px_0_0_rgba(0,0,0,0.35)]">
          <span class="text-sm font-semibold tracking-tight">WHAT IS MOTO?</span>
        </span>
      </div>

      <div class="grid lg:grid-cols-2 gap-6 items-start">
        
        <h2 class="text-[44px] sm:text-6xl leading-[0.9] font-extrabold tracking-tight">
          THE TICKER IS <span class="text-sky-400">$MOTO</span><br/>
        </h2>

        <!-- Texto -->
        <p class="text-neutral-300 text-sm sm:text-base leading-relaxed">
          Breve copy sobre tu token/proyecto. Mantén el tono divertido y directo.
          Puedes usar 2–3 líneas. Este bloque queda a la derecha en desktop.
        </p>
      </div>

    </section>

    <!-- Card 1 -->
    <section
      class="rounded-3xl border-4 border-[#233055] bg-[#0e1730]
             p-6 sm:p-8 shadow-[0_10px_0_0_rgba(0,0,0,0.45)]">
      <h3 class="text-3xl sm:text-4xl font-extrabold tracking-tight mb-2">$MOTO STATS</h3>
      <p class="text-neutral-300 text-sm">
        Métricas clave. Actualiza con tus datos reales.
      </p>
      <div class="mt-6 grid grid-cols-2 gap-4">
        <div class="rounded-2xl border-4 border-[#233055] bg-[#0f1a37] p-4 text-center">
          <div class="text-3xl font-extrabold">203,087</div>
          <div class="text-xs uppercase tracking-wide text-neutral-400">Holders</div>
        </div>
        <div class="rounded-2xl border-4 border-[#233055] bg-[#0f1a37] p-4 text-center">
          <div class="text-3xl font-extrabold">1.2B</div>
          <div class="text-xs uppercase tracking-wide text-neutral-400">Supply</div>
        </div>
      </div>
    </section>

    <!-- Card 2 -->
    <section
      class="rounded-3xl border-4 border-[#233055] bg-[#0e1730]
             p-6 sm:p-8 shadow-[0_10px_0_0_rgba(0,0,0,0.45)]">
      <h3 class="text-3xl sm:text-4xl font-extrabold tracking-tight mb-2">$PENGU HOLDERS</h3>
      <p class="text-neutral-300 text-sm">
        Otro bloque con KPIs, gráfica o CTA.
      </p>
      <button
        class="mt-6 inline-flex items-center justify-center rounded-2xl border-4 border-[#233055]
               bg-sky-400 text-black font-extrabold px-5 py-3 shadow-[0_6px_0_0_rgba(0,0,0,0.45)] active:translate-y-1 active:shadow-[0_3px_0_0_rgba(0,0,0,0.45)]">
        View Dashboard
      </button>
    </section>

  </div>
</div>


  <script type="module">
    const canvas = document.getElementById('space');
    const ctx = canvas.getContext('2d', { alpha: true });
    const DPR = Math.max(1, Math.min(2, window.devicePixelRatio || 1));

    // === Control por densidad ===
    const DENSITY = 0.000035;     // baja/sube la densidad
    const MIN = 8, MAX_CAP = 18;  // límites
    let MAX = 0;

    const MOUSE_RADIUS = 120;
    const MOUSE_FORCE = 0.12;
    const FRICTION = 0.998;
    let W = 0, H = 0, running = true;
    const mouse = { x: -9999, y: -9999 };

    // Respeta reduced motion
    const media = window.matchMedia('(prefers-reduced-motion: reduce)');
    const setMotion = () => { running = !media.matches; };
    media.addEventListener?.('change', setMotion); setMotion();

    function recomputeMax() {
      const rect = canvas.getBoundingClientRect();
      const area = rect.width * rect.height;
      MAX = Math.min(MAX_CAP, Math.max(MIN, Math.round(area * DENSITY)));
    }

    function resize() {
      const rect = canvas.getBoundingClientRect();
      W = Math.floor(rect.width * DPR);
      H = Math.floor(rect.height * DPR);
      canvas.width = W; canvas.height = H;
      canvas.style.width = rect.width + 'px';
      canvas.style.height = rect.height + 'px';
      recomputeMax();
      // ajusta cantidad al vuelo
      balanceRocks();
    }
    window.addEventListener('resize', resize, { passive: true });

    const rand = (a,b)=> a + Math.random()*(b-a);
    const clamp = (v,a,b)=> Math.max(a, Math.min(b,v));

    // Carga múltiples imágenes
    const ROCK_IMAGES = [];
    const TOTAL_IMGS = 7;
    let loaded = 0;

    for (let i=1; i<=TOTAL_IMGS; i++) {
      const img = new Image();
      img.src = `/rock_${String(i).padStart(2,"0")}.png`;
      img.onload = ()=> {
        loaded++;
        if (loaded === TOTAL_IMGS) init();
      };
      ROCK_IMAGES.push(img);
    }

    const ROCKS = [];

    function createRock() {
      const depth = rand(0.4,1.6);
      const size = rand(28,96)*depth;
      return {
        x: rand(0,W), y: rand(0,H),
        vx: rand(-0.35,0.35)*depth,
        vy: rand(-0.35,0.35)*depth,
        r: size,
        d: depth,
        rot: rand(0, Math.PI*2),
        vr: rand(-0.01,0.01)*depth,
        sprite: ROCK_IMAGES[Math.floor(Math.random()*ROCK_IMAGES.length)]
      };
    }

    function balanceRocks() {
      if (ROCKS.length < MAX) {
        const need = MAX - ROCKS.length;
        for (let i=0; i<need; i++) ROCKS.push(createRock());
      } else if (ROCKS.length > MAX) {
        ROCKS.length = MAX;
      }
    }

    function init() {
      resize(); // también fija MAX inicial
      balanceRocks();
      requestAnimationFrame(loop);
    }

    function toCanvasCoords(e) {
      const rect = canvas.getBoundingClientRect();
      return { x: (e.clientX - rect.left) * DPR, y: (e.clientY - rect.top) * DPR };
    }
    window.addEventListener('pointermove', e=>{
      const p = toCanvasCoords(e);
      mouse.x = p.x; mouse.y = p.y;
    }, {passive:true});
    window.addEventListener('pointerleave', ()=> { mouse.x=-9999; mouse.y=-9999; });

    function loop() {
      if (!running) { ctx.clearRect(0,0,W,H); return; }
      ctx.clearRect(0,0,W,H);

      for (const a of ROCKS) {
        // Repulsión
        const dx = a.x - mouse.x, dy = a.y - mouse.y;
        const dist = Math.hypot(dx,dy);
        if (dist < (MOUSE_RADIUS * a.d)) {
          const f = (1 - dist/(MOUSE_RADIUS*a.d)) * MOUSE_FORCE;
          const nx = dx / (dist || 1), ny = dy / (dist || 1);
          a.vx += nx * f * 2.0;
          a.vy += ny * f * 2.0;
        }

        // Actualiza
        a.x += a.vx; a.y += a.vy;
        a.vx *= FRICTION; a.vy *= FRICTION;
        a.rot += a.vr;

        // Wrap
        if (a.x < -a.r) a.x = W+a.r;
        if (a.x > W+a.r) a.x = -a.r;
        if (a.y < -a.r) a.y = H+a.r;
        if (a.y > H+a.r) a.y = -a.r;

        // Dibujo
        const s = clamp(a.r,12,256);
        ctx.save();
        ctx.translate(a.x, a.y);
        ctx.rotate(a.rot);
        ctx.globalAlpha = clamp(0.5+(a.d-0.4)/2.4, 0.5, 1);
        ctx.drawImage(a.sprite, -s/2, -s/2, s, s);
        ctx.restore();
      }
      requestAnimationFrame(loop);
    }
  </script>
</section>


  <section id="after" class="relative bg-[#33383b] text-neutral-100 min-h-screen flex items-center justify-center z-20">
    <div class="mx-auto max-w-3xl p-8 w-full text-center">
      <h2 class="text-3xl font-semibold mb-4">Nueva Sección</h2>
      <p class="text-lg opacity-90">Contenido adicional que aparece al terminar la intro.</p>
    </div>
  </section>

  <section id="intro" class="fixed inset-0 h-screen overflow-hidden z-20">
    <div id="light-background" class="absolute inset-0 bg-[#e4e7e9] z-5 opacity-0"></div>
    <div id="logo-mask" class="absolute w-full h-full">
      <picture id="moto" class="absolute h-full scale-112 block overflow-hidden">
        <img id="moto-background" src={MotoBackground.src} class="w-full h-full object-cover" />
      </picture>
    </div>
    <div id="outside-black" class="absolute inset-0 pointer-events-none z-20"></div>
    <img id="eyes" src={MotoEyes.src} alt="eyes" class="absolute left-1/2 top-[11.5%] -translate-x-1/2 pointer-events-none z-20 w-[clamp(20vh,20%,25vh)]" />
    <img id="moto-welcome" class="mask-fade-b absolute left-1/2 top-[40%] -translate-x-1/2 z-20 w-[min(90vw,800px)]" src={MotoWelcome.src} alt="Welcome" />
    <div class="absolute flex flex-col items-center justify-between p-8 w-full z-20">
      <header class="flex justify-end w-full">
        <Menu class="size-14 text-rose-300" />
      </header>
      <footer id="moto-footer" class="absolute bottom-0 m-auto" />
    </div>
  </section>

</Layout>

<style>

  #content, #after, #intro { will-change: transform; }

  #logo-mask {
    background: black;
    mask-image: url("/moto-logo-mask.svg");
    mask-type: luminance;
    mask-position: center 28%;
    mask-repeat: no-repeat;
    mask-size: clamp(5150vh, 3500%, 0vh);
  }

  #outside-black {
    background: #32383b;
    mask-image: linear-gradient(#fff 0 0), url("/moto-logo-mask.svg");
    mask-repeat: no-repeat, no-repeat;
    mask-position: center, center 28%;
    mask-size: 100% 100%, clamp(5150vh, 3500%, 0vh);
    mask-composite: exclude;
  }

  #moto-welcome{
    --reveal: 0%;
    --feather: 28%;
    mask-image: linear-gradient(
      to top,
      black 0%,
      black var(--reveal),
      transparent calc(var(--reveal) + var(--feather))
    );
  }

  .scroll-container {
    height: 250vh;
    position: relative;
  }

  @keyframes float {
  0%,100% { transform: translateY(0); }
  50%     { transform: translateY(-20px); }
}
@keyframes float2 {
  0%,100% { transform: translateY(0) rotate(0deg); }
  50%     { transform: translateY(-14px) rotate(2deg); }
}

</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const tl = gsap.timeline({ ease: "power2.out" });

  tl.to("#moto", { duration: 0.8, scale: 1 })
    .to("#logo-mask", { maskSize: "clamp(20vh, 25%, 30vh)" }, 0.10)
    .to("#outside-black", { maskSize: "100% 100%, clamp(20vh, 25%, 30vh)" }, 0.10)
    .to("#light-background", { opacity: 1, duration: 0.4 }, 0.4)
    .to("#logo-mask", { opacity: 0, duration: 0.2 }, 0.5)
    .fromTo("#eyes", { opacity: 0, y: -15 }, { opacity: 1, y: 0, duration: 0.35 }, ">-0.1")
    .fromTo("#moto-welcome", { opacity: 0, "--reveal": "0%" }, { opacity: 1, "--reveal": "100%", duration: 0.5, ease: "power3.out" }, ">-0.1")
    .to("#intro", { yPercent: -100, ease: "none", duration: 1 }, ">")
    .set("#after", { y: 100 })
    .to("#after", { y: 0, duration: 0.1, ease: "power2.out" }, "<"); // entra after desde abajo en paralelo


  ScrollTrigger.create({
    trigger: ".scroll-container",
    start: "top top",
    end: "bottom bottom",
    scrub: 1,
    animation: tl,
    invalidateOnRefresh: true,
  });
</script>